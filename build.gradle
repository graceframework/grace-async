buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
    }
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}
version project.projectVersion

ext {
    commonBuild = 'http://localhost:9000'
}

subprojects {

    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = name.startsWith('grails-plugin')
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    if(isGrailsPlugin) {
        group "org.grails.plugins"
    }
    else {
        group "org.grails"
    }

    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    if (it.projectDir.path.endsWith("examples/${it.name}".toString())) {
        apply plugin:"org.grails.grails-web"
    }
    else if (isGrailsPlugin) {
        apply from: resources.text.fromInsecureUri("${commonBuild}/common-plugin.gradle")
    }
    else {
        apply from: resources.text.fromInsecureUri("${commonBuild}/common-project.gradle")
    }

    dependencies {
        compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    }
}

apply from:resources.text.fromInsecureUri("${commonBuild}/common-publishing.gradle")
apply from:resources.text.fromInsecureUri("${commonBuild}/common-docs.gradle")
